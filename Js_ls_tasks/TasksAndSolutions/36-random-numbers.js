import brLine from "./js_border_line.js";

/** ЗАДАЧА 36 - Случайные числа
 *
 * 1. Cгенерируйте новое 4-значное случайное число. Диапазон для случайного числа 1000 - 9999.
 * 2. Убедитесь, что это новое случайное число не совпадает ни с одним из чисел в массиве myNumbers.
 * 3. Если совпадает, вам нужно сгенерировать новое 4-значное число.
 * 4. Если совпадений нет (новый номер уникален), добавьте его в массив myNumbers.
 *
 * ВАЖНО: В решении задачи используйте функции:
 *  - для генерации случайного числа в заданном диапазоне
 *  - для добавления случайного числа в массив с возвратом измененного массива
 */

const MIN = 1000;
const MAX = 9999;

const myNumbers = [2355, 7235, 8135, 1762, 2361, 8351];

/* 
Math.floor() - округляет число в меньшую сторону до ближайшего целого значения или кратного указанной точности. 
Случайное число генерируется в диапазоне от 0 (включительно) до 1 (исключительно). 

Допустим это 0.01324345...., даже при умножении на 10000 мы вылетаем по нижней границе, поэтому у нас должно 
быть простоянное слагаемое - нижняя граница 1000. Какой бы маленький результат не сгенерировался ниже 1000 мы
не опустимся. Но нам и выше 9999 подниматься нельзя и теоретически не будь у нас нижней границы нам бы тех 
самых 10000 хватило бы, но мы за счет нижней границы "неявно подняли" множитель, значит его надо уменьшит на
величину слагаемого - 1000
*/
function rndGen(min, max){
        return Math.floor(Math.random() * (max - min + 1)) + min;
}

/* ----- 1 - Вариант первый ----- */
function mkNewArrayAndAddElement(arr, element){
        let isElementDuplicate = false; // Задаем переменную-переключатель регистрирующую повтор элемента массива
        const mkNewArr = new Array(); // Создаем новый массив
        mkNewArr.push(...arr); // Загружаем в новый массив, данные другого массива

        for(let i = 0; i <= mkNewArr.length; i++){ // Перебираем массив в поиске дубликата добавляемому элементу 
                if(mkNewArr[i] == element){
                        isElementDuplicate = true; // Дубликат найден - "щелкаем переключатель"
                }
        }
        /* Дубликатов нет добавляем элемент в массив */
        if(!isElementDuplicate) {
                mkNewArr.push(element);
        }

        return mkNewArr;
}

/* Тест НЕ добавления дубликата*/
console.log(mkNewArrayAndAddElement(myNumbers, 8135));
brLine();

/* Тест работы обеих функций */
console.log(mkNewArrayAndAddElement(myNumbers, rndGen(MIN, MAX)));
brLine();

/* ----- 2 - Вариант второй использование функции *.includes() ----- */
function mkArrayAndAddNonDuplicateElement(arr, element){
        const mkNewArr = new Array(); // Создаем новый массив
        mkNewArr.push(...arr); // Загружаем в новый массив, данные другого массива

        /* Дубликатов нет добавляем элемент в массив */
        if(!mkNewArr.includes(element)) {
                mkNewArr.push(element);
        }

        return mkNewArr;
}

/* Тест НЕ добавления дубликата */
console.log(mkArrayAndAddNonDuplicateElement(myNumbers, 8135));
brLine();

/* Тест добавления случайного числа */
console.log(mkArrayAndAddNonDuplicateElement(myNumbers, rndGen(MIN, MAX)));